import { BinaryExpression, LogicalExpressionVisitor } from "./";
export declare class LogicalExpression {
    constructor();
    ClassName: string;
    And(operand: object): BinaryExpression;
    And(operand: LogicalExpression): BinaryExpression;
    DividedBy(operand: object): BinaryExpression;
    DividedBy(operand: LogicalExpression): BinaryExpression;
    EqualsTo(operand: object): BinaryExpression;
    EqualsTo(operand: LogicalExpression): BinaryExpression;
    GreaterThan(operand: object): BinaryExpression;
    GreaterThan(operand: LogicalExpression): BinaryExpression;
    GreaterOrEqualThan(operand: object): BinaryExpression;
    GreaterOrEqualThan(operand: LogicalExpression): BinaryExpression;
    LesserThan(operand: object): BinaryExpression;
    LesserThan(operand: LogicalExpression): BinaryExpression;
    LesserOrEqualThan(operand: object): BinaryExpression;
    LesserOrEqualThan(operand: LogicalExpression): BinaryExpression;
    Minus(operand: object): BinaryExpression;
    Minus(operand: LogicalExpression): BinaryExpression;
    Modulo(operand: object): BinaryExpression;
    Modulo(operand: LogicalExpression): BinaryExpression;
    NotEqual(operand: object): BinaryExpression;
    NotEqual(operand: LogicalExpression): BinaryExpression;
    Or(operand: object): BinaryExpression;
    Or(operand: LogicalExpression): BinaryExpression;
    Plus(operand: object): BinaryExpression;
    Plus(operand: LogicalExpression): BinaryExpression;
    Mult(operand: object): BinaryExpression;
    Mult(operand: LogicalExpression): BinaryExpression;
    BitwiseOr(operand: object): BinaryExpression;
    BitwiseOr(operand: LogicalExpression): BinaryExpression;
    BitwiseAnd(operand: object): BinaryExpression;
    BitwiseAnd(operand: LogicalExpression): BinaryExpression;
    BitwiseXOr(operand: object): BinaryExpression;
    BitwiseXOr(operand: LogicalExpression): BinaryExpression;
    LeftShift(operand: object): BinaryExpression;
    LeftShift(operand: LogicalExpression): BinaryExpression;
    RightShift(operand: object): BinaryExpression;
    RightShift(operand: LogicalExpression): BinaryExpression;
    ToString(): string;
    Accept(visitor: LogicalExpressionVisitor): void;
}
